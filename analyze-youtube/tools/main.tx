// src/main.tsx
import { Devvit } from '@devvit/public-api';
import { Devvit, SettingScope } from '@devvit/public-api';
import { analyzeVideo, extractVideoId } from './services/analyzer.js';

Devvit.configure({
  redditAPI: true,
  http: true, // Enable HTTP requests
});

// Add settings for API keys
Devvit.addSettings([
  {
    type: 'string',
    name: 'OPENAI_API_KEY',
    label: 'OpenAI API Key',
    scope: SettingScope.App,
    isSecret: true,
  },
]);
/*Devvit.addSettings([
  {
    type: 'string',
    name: 'openai_api_key',
    label: 'OpenAI API Key',
    isSecret: true,
  },*/
  {
    type: 'string',
    name: 'youtube_api_key',
    label: 'YouTube API Key (optional)',
    isSecret: true,
  },
]);

// Custom post type
Devvit.addCustomPostType({
  name: 'YouTube Analyzer',
  height: 'tall',
  render: (context) => {
    const [videoUrl, setVideoUrl] = context.useState('');
    const [analysis, setAnalysis] = context.useState('');
    const [loading, setLoading] = context.useState(false);
    const [error, setError] = context.useState('');

    const handleAnalyze = async () => {
      if (!videoUrl.trim()) {
        setError('Please enter a YouTube URL');
        return;
      }

      setLoading(true);
      setError('');
      setAnalysis('');

      try {
        // Extract video ID
        const videoId = extractVideoId(videoUrl);
        
        if (!videoId) {
          setError('Invalid YouTube URL. Please enter a valid video URL or ID.');
          setLoading(false);
          return;
        }

        // Get OpenAI API key from settings
        const settings = await context.settings.getAll();
        const apiKey = settings['openai_api_key'] as string;

        if (!apiKey) {
          setError('OpenAI API key not configured. Please add it in app settings.');
          setLoading(false);
          return;
        }

        // Analyze video
        const result = await analyzeVideo(videoId, apiKey);

        if (result.success && result.analysis) {
          setAnalysis(result.analysis);
        } else {
          setError(result.error || 'Analysis failed');
        }
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An unexpected error occurred');
      } finally {
        setLoading(false);
      }
    };

    return (
      <vstack width="100%" height="100%" padding="medium" gap="medium">
        <text size="xxlarge" weight="bold" color="neutral-content">
          üé• YouTube Content Analyzer
        </text>

        <vstack gap="small" width="100%">
          <text size="medium" weight="bold">
            Enter YouTube URL or Video ID:
          </text>
          <hstack width="100%" gap="small">
            <vstack grow>
              <textInput
                value={videoUrl}
                onTextChange={setVideoUrl}
                placeholder="https://youtube.com/watch?v=..."
              />
            </vstack>
            <button
              onPress={handleAnalyze}
              disabled={loading}
              appearance="primary"
            >
              {loading ? 'Analyzing...' : 'Analyze'}
            </button>
          </hstack>
        </vstack>

        {error && (
          <vstack
            width="100%"
            padding="medium"
            backgroundColor="neutral-background-weak"
            cornerRadius="small"
          >
            <text color="red" weight="bold">
              ‚ö†Ô∏è Error
            </text>
            <text color="red">{error}</text>
          </vstack>
        )}

        {loading && (
          <vstack width="100%" alignment="center middle" gap="small">
            <text size="large">üîÑ Analyzing video...</text>
            <text size="small" color="neutral-content-weak">
              This may take 15-30 seconds
            </text>
          </vstack>
        )}

        {analysis && !loading && (
          <vstack
            width="100%"
            padding="medium"
            backgroundColor="neutral-background-weak"
            cornerRadius="small"
            gap="small"
          >
            <text size="large" weight="bold">
              üìä Analysis Results
            </text>
            <text size="medium" wrap>
              {analysis}
            </text>
          </vstack>
        )}

        {!analysis && !loading && !error && (
          <vstack width="100%" alignment="center middle" gap="small">
            <text size="medium" color="neutral-content-weak">
              Enter a YouTube URL above to analyze its content for:
            </text>
            <vstack gap="small" padding="small">
              <text>‚Ä¢ Toxicity levels</text>
              <text>‚Ä¢ Bias detection</text>
              <text>‚Ä¢ Misinformation flags</text>
            </vstack>
          </vstack>
        )}
      </vstack>
    );
  },
});

export default Devvit;